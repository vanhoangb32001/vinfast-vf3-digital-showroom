import { motion } from "framer-motion"
import { useState } from "react"
import {
  Car,
  Palette,
  CreditCard,
  CheckCircle,
  Loader2,
  Battery,
  Shield,
  Zap,
  HandCoins,
  Landmark
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"

const colorOptions = [
  { value: "summer-yellow", label: "Summer Yellow", color: "#FFD700" },
  { value: "rose-pink", label: "Rose Pink", color: "#FFB6C1" },
  { value: "zenith-grey", label: "Zenith Grey", color: "#708090" },
  { value: "crimson-red", label: "Crimson Red", color: "#DC143C" },
  { value: "sky-blue", label: "Sky Blue", color: "#87CEEB" },
  { value: "urban-mint", label: "Urban Mint", color: "#98FB98" },
  { value: "infinity-blanc", label: "Infinity Blanc", color: "#FFFFFF" },
  { value: "iris-berry", label: "Iris Berry", color: "#8A2BE2" },
  { value: "electric-blue", label: "Electric Blue", color: "#0080FF" }
]

const faqData = [
  {
    question: "Qu√£ng ƒë∆∞·ªùng th·ª±c t·∫ø c·ªßa VF3 l√† bao nhi√™u?",
    answer: "VinFast VF3 c√≥ qu√£ng ƒë∆∞·ªùng ho·∫°t ƒë·ªông l√™n ƒë·∫øn 215km theo ti√™u chu·∫©n NEDC/WLTP. Qu√£ng ƒë∆∞·ªùng th·ª±c t·∫ø c√≥ th·ªÉ thay ƒë·ªïi t√πy thu·ªôc v√†o ƒëi·ªÅu ki·ªán l√°i xe, ƒë·ªãa h√¨nh, th·ªùi ti·∫øt v√† th√≥i quen s·ª≠ d·ª•ng."
  },
  {
    question: "Ch√≠nh s√°ch b·∫£o h√†nh pin nh∆∞ th·∫ø n√†o?",
    answer: "Pin c·ªßa VF3 ƒë∆∞·ª£c b·∫£o h√†nh 8 nƒÉm kh√¥ng gi·ªõi h·∫°n s·ªë kilomet khi mua pin. ƒê·ªëi v·ªõi t√πy ch·ªçn thu√™ pin, kh√°ch h√†ng s·∫Ω c√≥ ch√≠nh s√°ch b·∫£o tr√¨ v√† thay th·∫ø pin theo h·ª£p ƒë·ªìng thu√™."
  },
  {
    question: "VF3 c√≥ t√≠nh nƒÉng ADAS n√†o?",
    answer: "VF3 ƒë∆∞·ª£c trang b·ªã c√°c t√≠nh nƒÉng an to√†n c∆° b·∫£n nh∆∞ ABS, TCS, HSA, EBD, c·∫£m bi·∫øn l√πi v√† camera sau. Tuy nhi√™n, c√°c t√≠nh nƒÉng ADAS n√¢ng cao nh∆∞ gi·ªØ l√†n ƒë∆∞·ªùng hay phanh kh·∫©n c·∫•p t·ª± ƒë·ªông ch∆∞a c√≥ s·∫µn."
  },
  {
    question: "Th·ªùi gian giao xe d·ª± ki·∫øn?",
    answer: "Th·ªùi gian giao xe d·ª± ki·∫øn kho·∫£ng 2 tu·∫ßn sau khi ƒë·∫∑t c·ªçc, t√πy thu·ªôc v√†o m√†u s·∫Øc v√† c·∫•u h√¨nh ƒë∆∞·ª£c ch·ªçn. VinFast s·∫Ω th√¥ng b√°o ch√≠nh x√°c th·ªùi gian giao xe sau khi x√°c nh·∫≠n ƒë∆°n h√†ng."
  }
]

interface FormData {
  fullName: string
  email: string
  phone: string
  variant: string
  color: string
  batteryOption: string
  message: string
  agreeTerms: boolean
}

export default function DatCoc() {
  const [formData, setFormData] = useState<FormData>({
    fullName: "",
    email: "",
    phone: "",
    variant: "",
    color: "",
    batteryOption: "",
    message: "",
    agreeTerms: false
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { toast } = useToast()

  const handleInputChange = (field: keyof FormData, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const calculatePrice = () => {
    const basePrice = 299000000 // 299 tri·ªáu
    const variantPrice = formData.variant === "plus" ? 20000000 : 0 // Plus th√™m 20 tri·ªáu
    const batteryPrice = formData.batteryOption === "buy" ? 0 : -50000000 // Thu√™ pin gi·∫£m 50 tri·ªáu
    return basePrice + variantPrice + batteryPrice
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    setIsSubmitting(true)

    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000))

    console.log("Form submitted:", formData)

    toast({
      title: "ƒê·∫∑t c·ªçc th√†nh c√¥ng!",
      description: "C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t c·ªçc VinFast VF3. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t."
    })

    setIsSubmitting(false)
  }

  const selectedColor = colorOptions.find(color => color.value === formData.color)

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  }

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <section className="relative overflow-hidden bg-gradient-hero">
        <div className="absolute inset-0 bg-black/20"></div>
        <div className="relative mx-auto max-w-7xl px-4 py-24 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center"
          >
            <h1 className="text-4xl font-bold tracking-tight text-white sm:text-6xl">
              ƒê·∫∑t c·ªçc VinFast VF3/VF5
            </h1>
            <p className="mt-6 text-lg leading-8 text-white/90 max-w-2xl mx-auto">
              ƒê·∫∑t c·ªçc ngay h√¥m nay ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát v√† l√† ng∆∞·ªùi ƒë·∫ßu ti√™n s·ªü h·ªØu VF3/VF5
            </p>
            <div className="mt-8">
              <Badge className="bg-white/20 border-white/30 text-white text-lg px-4 py-2">
                üéâ ∆Øu ƒë√£i: T·∫∑ng 2 nƒÉm b·∫£o hi·ªÉm v·∫≠t ch·∫•t ƒë·∫øn 30/09/2025
              </Badge>
            </div>
          </motion.div>
        </div>
      </section>

      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8"
      >
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Form Section */}
          <motion.div variants={itemVariants} className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Car className="mr-2 h-6 w-6 text-primary" />
                  Th√¥ng tin ƒë·∫∑t c·ªçc
                </CardTitle>
                <CardDescription>
                  Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ho√†n t·∫•t vi·ªác ƒë·∫∑t c·ªçc VF3/VF5
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  {/* Personal Information */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="fullName">H·ªç v√† t√™n</Label>
                      <Input
                        id="fullName"
                        value={formData.fullName}
                        onChange={(e) => handleInputChange("fullName", e.target.value)}
                        placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
                      <Input
                        id="phone"
                        type="tel"
                        value={formData.phone}
                        onChange={(e) => handleInputChange("phone", e.target.value)}
                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                        required
                      />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => handleInputChange("email", e.target.value)}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                      required
                    />
                  </div>

                  {/* Vehicle Configuration */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="variant">Lo·∫°i xe</Label>
                      <Select value={formData.variant} onValueChange={(value) => handleInputChange("variant", value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn lo·∫°i xe" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="eco">VF3</SelectItem>
                          <SelectItem value="plus">VF5</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="color">M√†u s·∫Øc</Label>
                      <Select value={formData.color} onValueChange={(value) => handleInputChange("color", value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn m√†u s·∫Øc" />
                        </SelectTrigger>
                        <SelectContent>
                          {colorOptions.map((color) => (
                            <SelectItem key={color.value} value={color.value}>
                              <div className="flex items-center space-x-2">
                                <div
                                  className="w-4 h-4 rounded-full border"
                                  style={{ backgroundColor: color.color }}
                                ></div>
                                <span>{color.label}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  {/* Message */}
                  <div>
                    <Label htmlFor="message">Tin nh·∫Øn</Label>
                    <Textarea
                      id="message"
                      value={formData.message}
                      onChange={(e) => handleInputChange("message", e.target.value)}
                      placeholder="ƒê·ªÉ l·∫°i l·ªùi nh·∫Øn ho·∫∑c y√™u c·∫ßu ƒë·∫∑c bi·ªát (t√πy ch·ªçn)"
                      rows={4}
                    />
                  </div>

                  {/* Submit Button */}
                  <Button
                    type="submit"
                    size="lg"
                    disabled={isSubmitting}
                    className="w-full hero-button"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                        ƒêang x·ª≠ l√Ω...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="mr-2 h-5 w-5" />
                        X√°c nh·∫≠n ƒë·∫∑t c·ªçc
                      </>
                    )}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </motion.div>

          {/* Summary Section */}
          <motion.div variants={itemVariants} className="space-y-6">
            {/* Price Summary */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Palette className="mr-2 h-6 w-6 text-primary" />
                  T√≥m t·∫Øt ƒë∆°n h√†ng
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {formData.variant && (
                  <div className="flex justify-between">
                    <span>Lo·∫°i xe:</span>
                    <span className="font-medium">
                      {formData.variant === "vf3" ? "VF3" : "VF5"}
                    </span>
                  </div>
                )}

                {selectedColor && (
                  <div className="flex justify-between items-center">
                    <span>M√†u s·∫Øc:</span>
                    <div className="flex items-center space-x-2">
                      <div
                        className="w-4 h-4 rounded-full border"
                        style={{ backgroundColor: selectedColor.color }}
                      ></div>
                      <span className="font-medium">{selectedColor.label}</span>
                    </div>
                  </div>
                )}

                {formData.variant && formData.batteryOption && (
                  <>
                    <hr />
                    <div className="flex justify-between text-lg font-bold">
                      <span>Gi√° ∆∞·ªõc t√≠nh:</span>
                      <span className="text-primary">
                        {calculatePrice().toLocaleString('vi-VN')} VNƒê
                      </span>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>

            {/* Benefits */}
            <Card>
              <CardHeader>
                <CardTitle>Quy·ªÅn l·ª£i khi ƒë·∫∑t c·ªçc</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Shield className="h-5 w-5 text-primary" />
                  <span className="text-sm">B·∫£o h√†nh ch√≠nh h√£ng to√†n di·ªán l√™n ƒë·∫øn 8 nƒÉm</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Zap className="h-5 w-5 text-primary" />
                  <span className="text-sm">H·ªó tr·ª£ s·∫°c mi·ªÖn ph√≠ 2 nƒÉm (30/06/2027)</span>
                </div>
                  <div className="flex items-center space-x-2">
                    <Car className="h-5 w-5 text-primary" />
                    <span className="text-sm">S·∫µn xe - ƒê·ªß m√†u - Giao ngay</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <HandCoins className="h-5 w-5 text-primary" />
                    <span className="text-sm">H·ªó tr·ª£ l√£i su·∫•t 3% trong 3 nƒÉm ƒë·∫ßu</span>
                  </div>
                <div className="flex items-center space-x-2">
                  <Landmark className="h-5 w-5 text-primary" />
                  <span className="text-sm">H·ªó tr·ª£ vay ng√¢n h√†ng l√™n ƒë·∫øn 90%</span>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>

        {/* FAQ Section */}
        <motion.section variants={itemVariants} className="mt-16">
          <div className="text-center mb-10">
            <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
              C√¢u h·ªèi th∆∞·ªùng g·∫∑p
            </h2>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
              T√¨m hi·ªÉu th√™m v·ªÅ VinFast VF3 v√† quy tr√¨nh ƒë·∫∑t c·ªçc
            </p>
          </div>

          <Card className="max-w-4xl mx-auto">
            <CardContent className="p-0">
              <Accordion type="single" collapsible className="w-full">
                {faqData.map((faq, index) => (
                  <AccordionItem key={index} value={`item-${index}`} className="px-6">
                    <AccordionTrigger className="text-left">
                      {faq.question}
                    </AccordionTrigger>
                    <AccordionContent className="text-muted-foreground">
                      {faq.answer}
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            </CardContent>
          </Card>
        </motion.section>
      </motion.div>
    </div>
  )
}